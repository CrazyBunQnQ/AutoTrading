// Code generated by go-bindata.
// sources:
// resources/Dockerfile
// resources/config.yaml
// resources/config_private.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4e\x2e\x4a\x2c\x49\xce\xe0\x02\x04\x00\x00\xff\xff\xc2\x57\x5d\xf7\x0d\x00\x00\x00")

func resourcesDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDockerfile,
		"resources/Dockerfile",
	)
}

func resourcesDockerfile() (*asset, error) {
	bytes, err := resourcesDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/Dockerfile", size: 13, mode: os.FileMode(420), modTime: time.Unix(1563601483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x6e\xdb\x30\x10\x45\xf7\x3c\xc5\x07\xb2\xb6\x62\x27\x88\x0b\xf0\x0a\xdd\x14\xe8\x01\x84\x21\x39\xb1\x08\x4b\x24\x3b\xa4\x2c\xe8\xf6\x05\x25\xd9\x68\x23\x67\x23\x10\xc3\xc7\x3f\xff\x8f\xc6\x51\x21\x43\x99\xb5\x02\xc8\x39\xd1\x38\xbd\xfd\x68\x8e\xcd\xb1\x39\x29\x20\x45\x29\x1a\xef\xef\xc7\xb3\x02\xb2\xed\x78\x20\x0d\x1a\x4b\x2c\x42\x8e\x15\x30\x06\x1a\x58\x43\x62\x2c\x15\x9f\x9c\xc6\x1c\x47\x81\x33\x48\x94\xf3\x14\xc5\x29\x65\x7c\xa0\x60\x97\x16\x2f\xa8\xcd\x46\xe9\x35\xba\x52\x52\xd6\xaf\xaf\x94\x7c\xb3\x11\x8d\x8d\x83\xc2\x1e\x99\xa6\xe9\x0b\x42\xc9\xb7\x57\x9e\xdb\x24\xfe\x46\x85\xb7\xae\x94\x3c\xae\x3c\x57\xaf\x6c\x85\xcb\x13\x64\xbd\xd8\xa8\x87\xca\x68\x7a\x6f\x37\x22\x8a\xe3\xef\xa4\xf6\xdc\x3f\x7a\xaa\x1b\xa3\xf1\x35\xe5\x40\x72\xe5\xd2\xee\x62\x2e\x40\x93\x24\x2a\x60\x99\xe0\x8a\x3c\x8e\x0a\xe8\x62\x2e\xed\x3a\xd4\xc7\x51\x55\xab\xd6\x72\xce\xff\x07\xda\xd7\xbe\x49\xbe\xaf\x7d\x51\xdc\x72\xed\x4a\xcf\xe3\xef\x4a\xd5\x20\x07\x32\x3d\xdf\xf5\xdb\xec\x2f\x81\xca\x28\xac\xf1\x49\x7d\x5e\x32\xbc\xe0\xc2\x81\x85\x0a\x3b\x94\x8e\xeb\xd0\x60\x66\x8d\x98\x38\xe4\xdc\x83\x6d\x22\xa1\x01\x87\x1a\x1a\x49\xfc\xc0\x6f\x1f\xe7\xdb\x09\x87\x0b\x87\x0a\x1f\x42\x8c\x63\xc1\xa1\x7e\xb6\x46\x57\x9e\x9b\xc4\xc3\xa2\x1e\x43\x3f\x43\xf8\xcf\xe8\x85\x1d\xa6\x8e\x03\x7e\xad\x14\x7e\xdf\xed\xc0\xe7\xcd\xaa\x5b\xde\x08\xa7\x9e\x2c\x63\xf2\xa5\xdb\xfe\xeb\xf4\x78\xf6\x93\x67\x7c\x4a\x1c\xf6\xcd\xee\x31\xb7\x91\x0e\xdc\xbe\x7d\x9c\xf5\xf3\xb2\x52\xb1\x58\x53\xac\x7e\xb6\xda\xc6\x34\xeb\xed\xb2\xd8\xea\xc6\x92\x7d\x0c\x1a\xa7\xe6\xf8\x37\x00\x00\xff\xff\xe4\x88\x5a\x1e\x9b\x03\x00\x00")

func resourcesConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYaml,
		"resources/config.yaml",
	)
}

func resourcesConfigYaml() (*asset, error) {
	bytes, err := resourcesConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yaml", size: 923, mode: os.FileMode(420), modTime: time.Unix(1563237311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesConfig_privateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x73\xe2\x36\x14\x7d\xf7\xaf\xb8\x33\xed\x63\x61\xf1\x27\xe0\xa7\x82\x71\x20\x50\x13\x1c\x20\x21\xcc\xb4\x8c\x2c\x0b\x23\x6c\x4b\x46\x92\x0d\x4e\xfe\x7c\xc7\x84\xa4\xdd\xcd\xee\x8b\x47\xa3\x7b\xee\x39\xe7\x9e\xeb\x51\x8c\x14\x8a\x90\x24\xae\x06\x80\xe2\x58\xb8\xa0\x1b\xdd\x76\xa7\xdd\x69\xeb\x1a\x40\xc1\x85\x72\xc1\x34\x3b\x8e\x06\x20\xf1\x81\xe4\xc8\x05\x54\x2a\xae\x04\x8a\x89\x06\x50\x32\x94\x13\x17\x04\xe7\xaa\x81\x9f\x63\x17\x5e\x6b\xc3\x59\xfd\x1e\x75\x9f\x7a\xd4\x4c\xac\xfc\x59\xd3\x22\xca\x10\xc3\x57\x89\x46\xaa\x14\x99\x0b\x07\xa5\x0a\xe9\x7e\xfb\x86\x0a\xda\xbe\xd5\xdb\x98\xe7\xff\x51\x7a\x02\xbd\xd6\xc3\x92\x85\x2c\xfc\x33\xc9\x11\xcd\x6e\xe5\xab\xc6\xf1\xef\x2e\xfa\xa7\xff\xc7\x9b\x73\xee\x1b\x6f\x66\x71\x37\x7e\x6b\xec\x17\x74\x97\x92\x7a\x57\x08\x5a\x21\x45\x5c\xe8\xf3\x75\x18\xd6\xf6\x4b\x32\x37\x83\x97\x53\xe6\x2d\x37\x4b\xcb\xb9\x1f\x88\x7b\xef\x61\x88\xcb\xbc\x26\xe9\xd4\xf0\xa4\xc5\x96\x46\x14\xe8\x09\x5a\x74\x7a\xe9\xd3\xe3\x68\x82\x56\xb4\x3c\x1e\xb7\xce\x7d\x33\x33\xc1\x82\xa8\xef\x69\xed\xa0\x7c\xf0\xd7\xd6\x72\x10\xa8\x33\x92\xfe\xd0\x92\x17\x3c\xc1\x83\x74\xc3\x1c\xd1\x5d\x4e\xf6\xa3\xe1\x5d\xea\xcf\x53\x13\x67\x62\x8e\xab\x35\x33\xd4\xbc\xcc\x18\x9a\xac\x0b\x3c\xd2\x3d\xa6\xff\xdf\x6a\x19\x65\x14\xbb\xf0\x14\xaf\x8a\xd9\xa2\xda\xff\xa5\x6f\xac\xea\x55\xbe\x04\xd5\x06\x19\x97\x28\x9b\x59\xd5\xc6\x0f\x8f\xc5\x74\xe3\xad\xd8\x56\xf6\xf2\xc0\x99\x4f\x7b\x0f\xfc\xd1\xeb\x6e\x7a\xf3\xb1\x3a\x8d\x58\xb0\x32\x2f\xcf\x3f\x38\xbd\xb1\x52\x7f\x41\xed\xf1\x88\x24\xc7\x74\x9b\xae\xac\x59\x38\xda\x66\xa7\x69\xaa\x8a\x7e\x76\x9a\x3d\x3d\x87\x83\x68\xfc\x32\x1d\x4b\xd3\xbe\x5f\x64\x1b\x4c\x56\x17\xbd\x27\xb7\x55\xdf\x89\x07\x93\x72\x9c\xc8\x99\xa6\x1d\x4a\x1e\xd1\x66\x6f\x39\x12\x29\x51\xbb\x2f\xab\xbb\x02\xda\x85\xe0\x1a\xc0\xf5\x9f\x78\x87\x7c\x1e\x35\x80\x03\x97\x6a\xf7\xbe\xd3\xcf\xa3\xd6\x64\x80\x31\x91\xf2\xfb\x68\xbf\xde\xfd\x62\x07\x5f\xef\x7e\x60\xbc\x45\x70\x10\x7b\x3b\x89\xf7\xc9\x81\xb4\xac\x3e\xb2\x23\xa3\x87\x5b\xd8\x32\x6c\xdd\xd1\xcd\x56\xdc\xeb\xed\xad\x9f\x47\x47\x74\x7b\x1f\x9b\x66\xbf\x85\x4d\x53\x27\x7a\x6c\xb4\x0c\xbd\x67\x21\xd3\xea\xb4\x70\xdc\x37\xf6\xcd\x00\x84\xa1\x28\x23\x1f\xfa\x3b\x49\x13\x86\x54\x29\x88\x0b\x7b\x94\xc9\xeb\x8c\xbf\x41\x42\x18\x11\x48\x91\x18\xd4\x81\x40\x4a\x6a\x88\x6a\x17\x78\x41\x98\x94\x19\x10\x5c\x20\x81\x72\x68\x35\xa1\x40\x21\x68\x4e\x0c\xdb\xa9\x74\x68\x25\x84\x35\xe0\x16\xe3\xbc\x54\xd0\x6a\x3e\x37\xa1\x94\xd4\xed\x82\xe4\x57\x76\xce\xb2\x1a\x04\x39\x95\x54\x90\x18\xce\x07\xc2\x60\xf1\x8e\x82\xe5\x87\x1d\xa0\xf2\x66\x35\xbe\xf6\x08\x52\x64\x08\x13\x38\x53\x75\x80\x9a\x97\x02\xf8\xf9\xb3\x6d\x46\x6a\xd8\x0b\x9e\x7f\x15\xfb\x18\xf3\x16\x79\x4e\x76\x86\xed\xb8\x10\x4c\xb0\x37\x08\x7d\xff\x3e\xc0\xd9\xfa\xce\xf0\x1f\x8b\x90\x26\x06\xd7\xcb\xcd\xb4\xb4\xd2\x71\x50\x0e\xd5\x62\x7a\xb2\x43\xdc\x1d\x66\x51\x1e\xd3\xaa\x58\x6c\xf9\x80\x8f\x3d\xef\x34\x5e\x06\x56\x7f\x70\xf6\x27\x7c\x1d\x8e\xc2\x64\xe0\xcb\x45\xf5\x54\xd9\x97\x8b\xa6\x71\x85\x23\x85\x7f\xfa\x60\x44\x51\xfb\xbd\xda\xa6\x5c\xd3\x2a\x22\x24\xe5\xcc\x05\xbd\xdd\xf9\x37\x00\x00\xff\xff\x68\x42\x24\x88\xcb\x04\x00\x00")

func resourcesConfig_privateYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfig_privateYaml,
		"resources/config_private.yaml",
	)
}

func resourcesConfig_privateYaml() (*asset, error) {
	bytes, err := resourcesConfig_privateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config_private.yaml", size: 1227, mode: os.FileMode(420), modTime: time.Unix(1563237761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/Dockerfile":          resourcesDockerfile,
	"resources/config.yaml":         resourcesConfigYaml,
	"resources/config_private.yaml": resourcesConfig_privateYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"Dockerfile":          &bintree{resourcesDockerfile, map[string]*bintree{}},
		"config.yaml":         &bintree{resourcesConfigYaml, map[string]*bintree{}},
		"config_private.yaml": &bintree{resourcesConfig_privateYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
