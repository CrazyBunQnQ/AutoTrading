// Code generated by go-bindata.
// sources:
// resources/config.yaml
// resources/config_private.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\xd1\x8e\xa3\x3c\x0c\x85\xef\xf3\x14\x47\x9a\xeb\x32\xb4\xa3\xe9\x2f\xe5\x15\xfe\x9b\x95\xf6\x01\x90\x49\xdc\x12\x15\x92\xac\x13\xca\xf2\xf6\xab\x00\xad\x76\x87\xce\x0d\xb2\x9c\xcf\xc7\x3e\x26\xb1\x94\xa9\xa5\xc4\x5a\x01\x64\xad\x68\x1c\x4f\xff\x55\x75\x55\x57\x47\x05\xc4\x20\x59\xe3\xe3\xa3\x3e\x2b\x20\x99\x8e\x07\xd2\xa0\x31\x87\x2c\x64\x59\x01\xa3\xa7\x81\x35\x24\x84\x5c\xf0\xc9\x6a\xcc\x61\x14\xd8\x16\x91\x52\x9a\x82\x58\xa5\x5a\xe7\xc9\x9b\xa5\xc5\x1b\x4a\xb3\x51\x7a\x8d\x2e\xe7\x98\xf4\xfb\x3b\x45\x57\x6d\x44\x65\xc2\xa0\xb0\x47\xa6\x69\xfa\x82\x50\x74\xcd\x8d\xe7\x26\x8a\xbb\x53\xe6\xad\x2b\x45\x87\x1b\xcf\x65\x56\x36\xc2\xf9\x05\xb2\x1e\x6c\xd4\x53\x65\x6c\x7b\x67\x36\x22\x88\xe5\xef\xa4\xf6\xdc\x5f\x7a\xaa\x1b\x43\xeb\x8a\xcb\x81\xe4\xc6\xb9\xd9\xd9\x5c\x80\x2a\x4a\x50\xc0\xb2\xc1\x15\x79\x86\x0a\xe8\x42\xca\xcd\xba\xd4\x67\xa8\xca\xa8\xc6\x70\x4a\xff\x1a\xda\xe7\xbe\x71\xbe\xcf\x7d\x51\xdc\x7c\xed\x52\xaf\xed\xef\x52\x65\x40\xf6\xd4\xf6\xfc\xd0\x6f\x92\xbb\x7a\xca\xa3\xb0\xc6\x85\xfa\xb4\x78\x78\xc3\x95\x3d\x0b\x65\xb6\xc8\x1d\x97\xa5\xa1\x9d\x35\x42\x64\x9f\x52\x0f\x36\x91\x84\x06\x1c\x8a\x69\x44\x71\x03\x9f\x3e\xcf\xf7\x23\x0e\x57\xf6\x05\x3e\xf8\x10\xc6\x8c\x43\xf9\x6c\x8d\x6e\x3c\x57\x91\x87\x45\x3d\xf8\x7e\x86\xf0\xaf\xd1\x09\x5b\x4c\x1d\x7b\xfc\x58\x29\xfc\x7c\x8c\x03\x97\xb6\x51\xed\x52\x23\x1c\x7b\x32\x8c\xc9\xe5\x6e\xfb\xaf\xd3\xb3\xec\x7f\x9e\x71\x91\x30\xec\x9b\x3d\x6c\x6e\x2b\x1d\xb8\x39\x7d\x9e\xf5\xeb\xb4\x52\x21\x9b\x36\x1b\xfd\xea\x6a\xb7\x6d\xb5\x9e\x2e\x17\x5b\xc5\x9e\xf2\x25\xc8\xd0\x58\x77\xb9\x2c\x05\xd9\x68\x9c\xaa\xcf\xb2\xe1\xdc\x69\xac\xef\x92\x43\x2a\x61\x5d\xe2\xdf\x12\x97\xb8\x3e\x2a\x75\x67\x49\x2e\x78\x8d\x63\x55\xff\x09\x00\x00\xff\xff\x6e\x9f\x55\x86\xda\x03\x00\x00")

func resourcesConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfigYaml,
		"resources/config.yaml",
	)
}

func resourcesConfigYaml() (*asset, error) {
	bytes, err := resourcesConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config.yaml", size: 986, mode: os.FileMode(420), modTime: time.Unix(1566386259, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesConfig_privateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x73\xe2\x36\x14\x7d\xf7\xaf\xb8\x33\xed\x63\xf1\xe2\x4f\xc0\x4f\xe5\x2b\x10\xa8\x09\x0e\x90\x10\x66\x5a\x46\x96\x65\xa3\xd8\x96\x8c\x24\x1b\x9c\xfc\xf9\x8e\x81\xa4\xdd\xcd\xee\x8b\xe7\x8e\xee\xd1\x3d\xe7\x9e\xe3\x51\x84\x14\x0a\x91\x24\x9e\x06\x80\xa2\x48\x78\x60\x98\x1d\xbd\xad\xb7\x75\x43\x03\x28\xb8\x50\x1e\x58\x56\xdb\xd5\x00\x24\x3e\x90\x1c\x79\x80\x4a\xc5\x95\x40\x11\xd1\x00\x4a\x86\x72\xe2\x81\xe0\x5c\x35\xf0\x53\xe4\xc1\x5b\x6d\xba\xeb\xdf\xc3\xce\x53\x97\x5a\x89\x9d\x3f\x6b\x5a\x48\x19\x62\xf8\x42\xd1\x50\x95\x22\xf3\xe0\xa0\x54\x21\xbd\x6f\xdf\x50\x41\xf5\x5b\x5f\xc7\x3c\xff\x6f\xe4\x50\xa0\xb7\x7a\x50\xb2\x80\x05\x7f\x26\x39\xa2\xd9\xad\x7d\xe1\x78\xfd\xbb\x83\xfe\xe9\xfd\xf1\xee\x9e\x7a\xe6\xbb\x55\xdc\x4d\xde\x1b\xf9\x05\xdd\xa7\xa4\xde\x17\x82\x56\x48\x11\x0f\x7a\x7c\x13\x04\xb5\xf3\x92\x2c\x2c\xff\xe5\x98\x0d\x57\xdb\x95\xed\xde\xf7\xc5\xfd\xf0\x61\x80\xcb\xbc\x26\xe9\xcc\x1c\x4a\x9b\xad\xcc\xd0\x37\x12\xb4\x6c\x77\xd3\xa7\xc7\xd1\x14\xad\x69\xf9\xfa\xba\x73\xef\x9b\x9d\x09\x16\x44\x7d\x3f\xd6\xf1\xcb\x87\xf1\xc6\x5e\xf5\x7d\x75\x42\x72\x3c\xb0\xe5\x19\x4f\x71\x3f\xdd\x32\x57\x74\x56\xd3\x78\x34\xb8\x4b\xc7\x8b\xd4\xc2\x99\x58\xe0\x6a\xc3\x4c\xb5\x28\x33\x86\xa6\x9b\x02\x8f\x8c\x21\x33\xfe\x2f\xb5\x0c\x33\x8a\x3d\x78\x8a\xd6\xc5\x7c\x59\xc5\x7f\x19\x5b\xbb\x7a\x93\x2f\x7e\xb5\x45\xe6\x39\xcc\xe6\x76\xb5\x1d\x07\xaf\xc5\x6c\x3b\x5c\xb3\x9d\xec\xe6\xbe\xbb\x98\x75\x1f\xf8\xe3\xb0\xb3\xed\x2e\x26\xea\x38\x62\xfe\xda\x3a\x3f\xff\xa0\xf4\x36\x95\x8e\x97\xd4\x99\x8c\x48\xf2\x9a\xee\xd2\xb5\x3d\x0f\x46\xbb\xec\x38\x4b\x55\xd1\xcb\x8e\xf3\xa7\xe7\xa0\x1f\x4e\x5e\x66\x13\x69\x39\xf7\xcb\x6c\x8b\xc9\xfa\x6c\x74\xe5\xae\xea\xb9\x51\x7f\x5a\x4e\x12\x39\xd7\xb4\x43\xc9\x43\xda\xe4\x96\x23\x91\x12\xb5\xff\x12\xdd\x05\xa0\x17\x82\x6b\x00\x97\x7f\xe2\x0a\xf9\x2c\x35\x80\x03\x97\x6a\x7f\xcd\xf4\xb3\xd4\x1a\x0f\x30\x26\x52\x7e\x6f\xed\xd7\xb3\x5f\x64\xf0\xf5\xec\x87\x89\x37\x0b\x0e\x22\x76\x92\x28\x4e\x0e\xa4\x65\xf7\x90\x13\x9a\x5d\xdc\xc2\xb6\xe9\x18\xae\x61\xb5\xa2\x6e\x37\xb6\x7f\x6e\x1d\x31\x9c\x38\xb2\xac\x5e\x0b\x5b\x96\x41\x8c\xc8\x6c\x99\x46\xd7\x46\x96\xdd\x6e\xe1\xa8\x67\xc6\xcd\x02\x84\xa1\x30\x23\x1f\xfc\x7b\x49\x13\x86\x54\x29\x88\x07\x31\xca\xe4\x65\xc7\xdf\x20\x21\x8c\x08\xa4\x48\x04\xea\x40\x20\x25\x35\x84\xb5\x07\xbc\x20\x4c\xca\x0c\x08\x2e\x90\x40\x39\xb4\x1a\x53\xa0\x10\x34\x27\xa6\xe3\x56\x06\xb4\x12\xc2\x1a\x70\x8b\x71\x5e\x2a\x68\x35\x9f\x1b\x51\x4a\x6a\xbd\x20\xf9\x65\x3a\x67\x59\x0d\x82\x1c\x4b\x2a\x48\x04\xa7\x03\x61\xb0\xbc\xa2\x60\xf5\x21\x07\xa8\xbc\x49\x8d\x2e\x77\x04\x29\x32\x84\x09\x9c\xa8\x3a\x40\xcd\x4b\x01\xfc\xf4\x79\x6d\x4e\x6a\x88\x05\xcf\xbf\x92\x7d\xac\x79\xb3\x3c\x27\x7b\xd3\x71\x3d\xf0\xa7\x78\xd8\x0f\xc6\xe3\x7b\x1f\x67\x9b\x3b\x73\xfc\x58\x04\x34\x31\xb9\x51\x6e\x67\xa5\x9d\x4e\xfc\x72\xa0\x96\xb3\xa3\x13\xe0\xce\x20\x0b\xf3\x88\x56\xc5\x72\xc7\xfb\x7c\x32\x1c\x1e\x27\x2b\xdf\xee\xf5\x4f\xe3\x29\xdf\x04\xa3\x20\xe9\x8f\xe5\xb2\x7a\xaa\x9c\xf3\x59\xd3\xb8\xc2\xa1\xc2\x3f\x7d\x30\xc2\x50\xbf\x76\x75\xca\x35\xad\xc8\x90\x8a\xb9\xc8\xf7\x11\x8d\xe3\x0b\x5e\x61\x0f\x4c\xdd\x69\xf2\x51\x07\x0f\xae\xef\x18\xe1\xb2\x29\xdb\x4d\x7d\x16\xc5\xa5\x6e\x1b\x9a\x56\x11\x21\x29\x67\x1e\x18\x7a\xfb\xdf\x00\x00\x00\xff\xff\x17\x35\xea\xc3\x0a\x05\x00\x00")

func resourcesConfig_privateYamlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConfig_privateYaml,
		"resources/config_private.yaml",
	)
}

func resourcesConfig_privateYaml() (*asset, error) {
	bytes, err := resourcesConfig_privateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/config_private.yaml", size: 1290, mode: os.FileMode(420), modTime: time.Unix(1566385722, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/config.yaml":         resourcesConfigYaml,
	"resources/config_private.yaml": resourcesConfig_privateYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"config.yaml":         &bintree{resourcesConfigYaml, map[string]*bintree{}},
		"config_private.yaml": &bintree{resourcesConfig_privateYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
